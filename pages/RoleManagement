import React, { useState, useEffect, useCallback } from "react";
import { DiscordBot, ServerRole } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Search, Users, Crown, Shield, Eye, Filter } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";

import RoleOverviewCard from "../components/roles/RoleOverviewCard";
import RoleForm from "../components/roles/RoleForm";

export default function RoleManagement() {
  const [bots, setBots] = useState([]);
  const [roles, setRoles] = useState([]);
  const [filteredRoles, setFilteredRoles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingRole, setEditingRole] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedBot, setSelectedBot] = useState("all");
  const [selectedServer, setSelectedServer] = useState("all");

  const loadBotsAndRoles = useCallback(async () => {
    setIsLoading(true);
    try {
      const [botsData, rolesData] = await Promise.all([
        DiscordBot.list("-created_date"),
        ServerRole.list("-position")
      ]);
      setBots(botsData);
      setRoles(rolesData);
      setFilteredRoles(rolesData);
    } catch (error) {
      console.error("Error loading data:", error);
      toast.error("Failed to load role data");
    }
    setIsLoading(false);
  }, []);

  useEffect(() => {
    loadBotsAndRoles();
  }, [loadBotsAndRoles]);

  useEffect(() => {
    let filtered = roles;

    // Filter by search query
    if (searchQuery.trim()) {
      filtered = filtered.filter(role => 
        role.role_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        role.server_name?.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Filter by bot
    if (selectedBot !== "all") {
      filtered = filtered.filter(role => role.bot_id === selectedBot);
    }

    // Filter by server
    if (selectedServer !== "all") {
      filtered = filtered.filter(role => role.server_id === selectedServer);
    }

    setFilteredRoles(filtered);
  }, [roles, searchQuery, selectedBot, selectedServer]);

  const handleCreateRole = async (roleData) => {
    try {
      await ServerRole.create(roleData);
      toast.success(`Role "${roleData.role_name}" created successfully!`);
      setShowForm(false);
      setEditingRole(null);
      loadBotsAndRoles();
    } catch (error) {
      console.error("Error creating role:", error);
      toast.error("Failed to create role");
    }
  };

  const handleUpdateRole = async (roleId, updates) => {
    try {
      await ServerRole.update(roleId, updates);
      toast.success("Role updated successfully!");
      setShowForm(false);
      setEditingRole(null);
      loadBotsAndRoles();
    } catch (error) {
      console.error("Error updating role:", error);
      toast.error("Failed to update role");
    }
  };

  const handleDeleteRole = async (roleId) => {
    if (!confirm("Are you sure you want to delete this role?")) return;
    
    try {
      await ServerRole.delete(roleId);
      toast.success("Role deleted successfully!");
      loadBotsAndRoles();
    } catch (error) {
      console.error("Error deleting role:", error);
      toast.error("Failed to delete role");
    }
  };

  // Statistics
  const totalRoles = roles.length;
  const adminRoles = roles.filter(role => role.permissions?.administrator).length;
  const autoAssignRoles = roles.filter(role => role.auto_assign).length;
  const servers = [...new Set(roles.map(role => role.server_id))].length;

  const uniqueServers = [...new Set(roles.map(role => ({ 
    id: role.server_id, 
    name: role.server_name || role.server_id 
  })).filter(server => server.id))];

  return (
    <div className="min-h-screen bg-[#1a1a1a] p-6">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4"
        >
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
              Role Management
            </h1>
            <p className="text-gray-400 text-lg">
              Manage Discord server roles across all your bots
            </p>
          </div>
          <Button
            onClick={() => setShowForm(true)}
            className="bg-[#5865F2] hover:bg-[#4752C4] text-white px-6 py-3 font-medium rounded-lg"
          >
            <Plus className="w-5 h-5 mr-2" />
            Create New Role
          </Button>
        </motion.div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="bg-[#2C2F33] border-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm font-medium mb-1">Total Roles</p>
                  <p className="text-2xl font-bold text-white">{totalRoles}</p>
                </div>
                <div className="p-3 rounded-lg bg-[#5865F2] bg-opacity-20">
                  <Users className="w-6 h-6 text-[#5865F2]" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-[#2C2F33] border-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm font-medium mb-1">Admin Roles</p>
                  <p className="text-2xl font-bold text-white">{adminRoles}</p>
                </div>
                <div className="p-3 rounded-lg bg-[#FAA61A] bg-opacity-20">
                  <Crown className="w-6 h-6 text-[#FAA61A]" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-[#2C2F33] border-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm font-medium mb-1">Auto-Assign</p>
                  <p className="text-2xl font-bold text-white">{autoAssignRoles}</p>
                </div>
                <div className="p-3 rounded-lg bg-[#43B581] bg-opacity-20">
                  <Shield className="w-6 h-6 text-[#43B581]" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-[#2C2F33] border-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm font-medium mb-1">Servers</p>
                  <p className="text-2xl font-bold text-white">{servers}</p>
                </div>
                <div className="p-3 rounded-lg bg-[#F04747] bg-opacity-20">
                  <Eye className="w-6 h-6 text-[#F04747]" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="bg-[#2C2F33] border-gray-800 mb-8">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Filter className="w-5 h-5" />
              Filters
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                <Input
                  placeholder="Search roles or servers..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="bg-[#1a1a1a] border-gray-700 text-white pl-10 focus:border-[#5865F2]"
                />
              </div>

              <Select value={selectedBot} onValueChange={setSelectedBot}>
                <SelectTrigger className="bg-[#1a1a1a] border-gray-700 text-white">
                  <SelectValue placeholder="All Bots" />
                </SelectTrigger>
                <SelectContent className="bg-[#2C2F33] border-gray-700">
                  <SelectItem value="all" className="text-gray-300">All Bots</SelectItem>
                  {bots.map((bot) => (
                    <SelectItem key={bot.id} value={bot.id} className="text-gray-300">
                      {bot.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select value={selectedServer} onValueChange={setSelectedServer}>
                <SelectTrigger className="bg-[#1a1a1a] border-gray-700 text-white">
                  <SelectValue placeholder="All Servers" />
                </SelectTrigger>
                <SelectContent className="bg-[#2C2F33] border-gray-700">
                  <SelectItem value="all" className="text-gray-300">All Servers</SelectItem>
                  {uniqueServers.map((server) => (
                    <SelectItem key={server.id} value={server.id} className="text-gray-300">
                      {server.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Button
                variant="outline"
                onClick={() => {
                  setSearchQuery("");
                  setSelectedBot("all");
                  setSelectedServer("all");
                }}
                className="bg-[#1a1a1a] border-gray-700 text-gray-300 hover:text-white"
              >
                Clear Filters
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Role Form */}
        <AnimatePresence>
          {showForm && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="mb-8"
            >
              <RoleForm
                role={editingRole}
                bots={bots}
                onSubmit={editingRole ? 
                  (data) => handleUpdateRole(editingRole.id, data) : 
                  handleCreateRole
                }
                onCancel={() => {
                  setShowForm(false);
                  setEditingRole(null);
                }}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Roles List */}
        <div>
          <h2 className="text-2xl font-bold text-white mb-6">
            Roles ({filteredRoles.length})
          </h2>
          
          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {Array(6).fill(0).map((_, i) => (
                <div key={i} className="bg-[#2C2F33] rounded-xl p-6 border border-gray-800 animate-pulse">
                  <div className="h-6 bg-gray-700 rounded mb-4"></div>
                  <div className="h-4 bg-gray-700 rounded mb-2"></div>
                  <div className="h-4 bg-gray-700 rounded w-3/4"></div>
                </div>
              ))}
            </div>
          ) : filteredRoles.length === 0 ? (
            <Card className="bg-[#2C2F33] border-gray-800">
              <CardContent className="p-12 text-center">
                <div className="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Users className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-white mb-2">No roles found</h3>
                <p className="text-gray-400 mb-4">
                  {roles.length === 0 ? "Create your first server role to get started" : "Try adjusting your filters"}
                </p>
                {roles.length === 0 && (
                  <Button
                    onClick={() => setShowForm(true)}
                    className="bg-[#5865F2] hover:bg-[#4752C4] text-white"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Create First Role
                  </Button>
                )}
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <AnimatePresence>
                {filteredRoles.map((role) => (
                  <RoleOverviewCard
                    key={role.id}
                    role={role}
                    bots={bots}
                    onEdit={(role) => {
                      setEditingRole(role);
                      setShowForm(true);
                    }}
                    onDelete={handleDeleteRole}
                    onUpdate={handleUpdateRole}
                  />
                ))}
              </AnimatePresence>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}