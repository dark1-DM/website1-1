
import React, { useState, useEffect, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { DiscordBot, ServerRole } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Plus, Users, Settings } from "lucide-react";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";
import { toast } from "sonner";

import RoleManagerHeader from "../components/roles/RoleManagerHeader";
import RoleList from "../components/roles/RoleList";
import RoleForm from "../components/roles/RoleForm";
import RoleStats from "../components/roles/RoleStats";

export default function RoleManager() {
  const { botId } = useParams();
  const navigate = useNavigate();
  const [bot, setBot] = useState(null);
  const [roles, setRoles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingRole, setEditingRole] = useState(null);

  const loadBotAndRoles = useCallback(async () => {
    setIsLoading(true);
    try {
      const botData = await DiscordBot.filter({ id: botId });
      if (botData.length > 0) {
        setBot(botData[0]);
      }

      const rolesData = await ServerRole.filter({ bot_id: botId });
      setRoles(rolesData.sort((a, b) => b.position - a.position));
    } catch (error) {
      console.error("Error loading roles:", error);
      toast.error("Failed to load role data");
    }
    setIsLoading(false);
  }, [botId]); // Dependency array for useCallback

  useEffect(() => {
    loadBotAndRoles();
  }, [loadBotAndRoles]); // Dependency array for useEffect

  const handleCreateRole = async (roleData) => {
    try {
      await ServerRole.create({ ...roleData, bot_id: botId });
      toast.success(`Role "${roleData.role_name}" created successfully!`);
      setShowForm(false);
      setEditingRole(null);
      loadBotAndRoles();
    } catch (error) {
      console.error("Error creating role:", error);
      toast.error("Failed to create role");
    }
  };

  const handleUpdateRole = async (roleId, updates) => {
    try {
      await ServerRole.update(roleId, updates);
      toast.success("Role updated successfully!");
      setShowForm(false);
      setEditingRole(null);
      loadBotAndRoles();
    } catch (error) {
      console.error("Error updating role:", error);
      toast.error("Failed to update role");
    }
  };

  const handleDeleteRole = async (roleId) => {
    if (!confirm("Are you sure you want to delete this role?")) return;
    
    try {
      await ServerRole.delete(roleId);
      toast.success("Role deleted successfully!");
      loadBotAndRoles();
    } catch (error) {
      console.error("Error deleting role:", error);
      toast.error("Failed to delete role");
    }
  };

  if (isLoading || !bot) {
    return (
      <div className="min-h-screen bg-[#1a1a1a] p-6">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-700 rounded w-64 mb-4"></div>
            <div className="h-64 bg-gray-700 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#1a1a1a] p-6">
      <div className="max-w-6xl mx-auto">
        <RoleManagerHeader 
          bot={bot}
          onBack={() => navigate(createPageUrl("Dashboard"))}
          onAddRole={() => setShowForm(true)}
        />

        <div className="grid lg:grid-cols-4 gap-8">
          <div className="lg:col-span-3">
            {showForm ? (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mb-8"
              >
                <RoleForm
                  role={editingRole}
                  onSubmit={editingRole ? 
                    (data) => handleUpdateRole(editingRole.id, data) : 
                    handleCreateRole
                  }
                  onCancel={() => {
                    setShowForm(false);
                    setEditingRole(null);
                  }}
                />
              </motion.div>
            ) : null}

            <RoleList
              roles={roles}
              onEdit={(role) => {
                setEditingRole(role);
                setShowForm(true);
              }}
              onDelete={handleDeleteRole}
              onUpdate={handleUpdateRole}
            />
          </div>

          <div>
            <RoleStats roles={roles} />
          </div>
        </div>
      </div>
    </div>
  );
}
