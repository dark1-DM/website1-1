import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { Plus, X } from "lucide-react";

export default function MusicConfig({ config, onChange }) {
  const handleToggle = (key, value) => {
    onChange({ [key]: value });
  };

  const handleInputChange = (key, value) => {
    onChange({ [key]: value });
  };

  const addAllowedChannel = () => {
    const channels = config.allowed_channels || [];
    onChange({ allowed_channels: [...channels, ''] });
  };

  const removeAllowedChannel = (index) => {
    const channels = config.allowed_channels || [];
    onChange({ allowed_channels: channels.filter((_, i) => i !== index) });
  };

  const updateAllowedChannel = (index, value) => {
    const channels = config.allowed_channels || [];
    channels[index] = value;
    onChange({ allowed_channels: [...channels] });
  };

  const handleSourceToggle = (source, value) => {
    const sources = config.sources || {};
    onChange({ sources: { ...sources, [source]: value } });
  };

  return (
    <div className="space-y-6">
      <Card className="bg-[#1a1a1a] border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            ðŸŽµ Music Player Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-gray-300">Max Queue Size</Label>
              <Input
                type="number"
                min="1"
                max="200"
                value={config.max_queue_size}
                onChange={(e) => handleInputChange('max_queue_size', parseInt(e.target.value) || 50)}
                className="bg-[#2C2F33] border-gray-600 text-white mt-2"
              />
            </div>

            <div>
              <Label className="text-gray-300">Default Volume (%)</Label>
              <Input
                type="number"
                min="1"
                max="100"
                value={config.default_volume}
                onChange={(e) => handleInputChange('default_volume', parseInt(e.target.value) || 50)}
                className="bg-[#2C2F33] border-gray-600 text-white mt-2"
              />
            </div>
          </div>

          <div>
            <Label className="text-gray-300">Auto-Leave Timeout (seconds)</Label>
            <Input
              type="number"
              min="60"
              max="3600"
              value={config.auto_leave_timeout}
              onChange={(e) => handleInputChange('auto_leave_timeout', parseInt(e.target.value) || 300)}
              className="bg-[#2C2F33] border-gray-600 text-white mt-2"
            />
            <p className="text-sm text-gray-500 mt-1">How long to wait before leaving empty voice channel</p>
          </div>

          <div className="flex items-center justify-between">
            <div>
              <Label className="text-gray-300">DJ Role Required</Label>
              <p className="text-sm text-gray-500">Require DJ role for music commands</p>
            </div>
            <Switch
              checked={config.dj_role_required}
              onCheckedChange={(value) => handleToggle('dj_role_required', value)}
            />
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-[#1a1a1a] border-gray-700">
        <CardHeader>
          <CardTitle className="text-white">Enabled Music Sources</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="flex items-center justify-between">
            <Label className="text-gray-300">YouTube</Label>
            <Switch
              checked={config.sources?.youtube}
              onCheckedChange={(value) => handleSourceToggle('youtube', value)}
            />
          </div>
          <div className="flex items-center justify-between">
            <Label className="text-gray-300">Spotify</Label>
            <Switch
              checked={config.sources?.spotify}
              onCheckedChange={(value) => handleSourceToggle('spotify', value)}
            />
          </div>
          <div className="flex items-center justify-between">
            <Label className="text-gray-300">SoundCloud</Label>
            <Switch
              checked={config.sources?.soundcloud}
              onCheckedChange={(value) => handleSourceToggle('soundcloud', value)}
            />
          </div>
        </CardContent>
      </Card>

      <Card className="bg-[#1a1a1a] border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center justify-between">
            Allowed Channels
            <Button
              variant="outline"
              size="sm"
              onClick={addAllowedChannel}
              className="bg-[#2C2F33] border-gray-600 text-gray-300 hover:text-white"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Channel
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {config.allowed_channels?.length > 0 ? (
            config.allowed_channels.map((channelId, index) => (
              <div key={index} className="flex gap-2">
                <Input
                  placeholder="Channel ID"
                  value={channelId}
                  onChange={(e) => updateAllowedChannel(index, e.target.value)}
                  className="bg-[#2C2F33] border-gray-600 text-white"
                />
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => removeAllowedChannel(index)}
                  className="bg-[#2C2F33] border-gray-600 text-gray-400 hover:text-red-400"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center py-4">
              No channel restrictions. Music can be used in any channel.
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}