
import React, { useState } from 'react';
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  MoreVertical, 
  Users, 
  Hash, 
  Play, 
  Pause, 
  Settings, 
  Eye, 
  EyeOff,
  Copy,
  Check,
  Cog
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

const statusColors = {
  online: 'bg-[#43B581] text-white',
  offline: 'bg-gray-600 text-white',
  idle: 'bg-[#FAA61A] text-white',
  maintenance: 'bg-[#F04747] text-white'
};

const categoryIcons = {
  moderation: '🛡️',
  music: '🎵',
  utility: '🔧',
  gaming: '🎮',
  economy: '💰',
  fun: '🎉',
  other: '🤖'
};

export default function BotCard({ bot, onUpdate }) {
  const [showToken, setShowToken] = useState(false);
  const [copied, setCopied] = useState(false);

  const handleStatusChange = (newStatus) => {
    onUpdate(bot.id, { status: newStatus });
  };

  const copyToken = async () => {
    await navigator.clipboard.writeText(bot.token);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const maskToken = (token) => {
    if (!token) return "";
    return `${token.slice(0, 8)}${'•'.repeat(Math.max(0, token.length - 16))}${token.slice(-8)}`;
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -2 }}
      transition={{ duration: 0.2 }}
    >
      <Card className="bg-[#2C2F33] border-gray-800 hover:border-gray-700 transition-all duration-200 overflow-hidden">
        <CardContent className="p-6">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="relative">
                {bot.avatar_url ? (
                  <img 
                    src={bot.avatar_url} 
                    alt={bot.name}
                    className="w-12 h-12 rounded-lg object-cover"
                  />
                ) : (
                  <div className="w-12 h-12 bg-gradient-to-r from-[#5865F2] to-[#7289DA] rounded-lg flex items-center justify-center">
                    <span className="text-white text-lg font-semibold">
                      {bot.name?.[0]?.toUpperCase() || 'B'}
                    </span>
                  </div>
                )}
                <div 
                  className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-[#2C2F33] ${
                    bot.status === 'online' ? 'bg-[#43B581]' :
                    bot.status === 'idle' ? 'bg-[#FAA61A]' :
                    bot.status === 'maintenance' ? 'bg-[#F04747]' :
                    'bg-gray-500'
                  }`}
                />
              </div>
              <div>
                <h3 className="font-semibold text-white text-lg">{bot.name}</h3>
                <div className="flex items-center gap-2">
                  <span className="text-xs text-gray-400">{categoryIcons[bot.category]} {bot.category}</span>
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Badge className={statusColors[bot.status]}>
                {bot.status}
              </Badge>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon" className="text-gray-400 hover:text-white hover:bg-gray-700">
                    <MoreVertical className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="bg-[#2C2F33] border-gray-700">
                  <DropdownMenuItem 
                    onClick={() => handleStatusChange(bot.status === 'online' ? 'offline' : 'online')}
                    className="text-gray-300 hover:text-white hover:bg-gray-700"
                  >
                    {bot.status === 'online' ? <Pause className="w-4 h-4 mr-2" /> : <Play className="w-4 h-4 mr-2" />}
                    {bot.status === 'online' ? 'Stop Bot' : 'Start Bot'}
                  </DropdownMenuItem>
                  <DropdownMenuItem 
                    onClick={() => handleStatusChange('maintenance')}
                    className="text-gray-300 hover:text-white hover:bg-gray-700"
                  >
                    <Settings className="w-4 h-4 mr-2" />
                    Maintenance
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>

          {bot.description && (
            <p className="text-gray-400 text-sm mb-4 line-clamp-2">
              {bot.description}
            </p>
          )}

          <div className="grid grid-cols-2 gap-4 mb-4">
            <div className="bg-[#1a1a1a] rounded-lg p-3">
              <div className="flex items-center gap-2 mb-1">
                <Users className="w-4 h-4 text-gray-400" />
                <span className="text-xs text-gray-400">Servers</span>
              </div>
              <p className="text-lg font-semibold text-white">{bot.server_count || 0}</p>
            </div>
            <div className="bg-[#1a1a1a] rounded-lg p-3">
              <div className="flex items-center gap-2 mb-1">
                <Hash className="w-4 h-4 text-gray-400" />
                <span className="text-xs text-gray-400">Prefix</span>
              </div>
              <p className="text-lg font-semibold text-white">{bot.prefix || '!'}</p>
            </div>
          </div>

          <div className="bg-[#1a1a1a] rounded-lg p-3 mb-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-xs text-gray-400 font-medium">Bot Token</span>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setShowToken(!showToken)}
                  className="h-6 w-6 text-gray-400 hover:text-white"
                >
                  {showToken ? <EyeOff className="w-3 h-3" /> : <Eye className="w-3 h-3" />}
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={copyToken}
                  className="h-6 w-6 text-gray-400 hover:text-white"
                >
                  {copied ? <Check className="w-3 h-3 text-[#43B581]" /> : <Copy className="w-3 h-3" />}
                </Button>
              </div>
            </div>
            <p className="text-xs font-mono text-gray-300 break-all">
              {showToken ? bot.token : maskToken(bot.token)}
            </p>
          </div>

          <Link to={createPageUrl(`BotConfig/${bot.id}`)}>
            <Button className="w-full bg-[#5865F2] hover:bg-[#4752C4] text-white">
              <Cog className="w-4 h-4 mr-2" />
              Configure Bot
            </Button>
          </Link>
        </CardContent>
      </Card>
    </motion.div>
  );
}
